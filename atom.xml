<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gitming</title>
  
  <subtitle>专注JavaWeb开发技术</subtitle>
  <link href="http://www.zhangjm.top/atom.xml" rel="self"/>
  
  <link href="http://www.zhangjm.top/"/>
  <updated>2022-04-08T03:58:56.676Z</updated>
  <id>http://www.zhangjm.top/</id>
  
  <author>
    <name>Gitming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Typora搭配PicGo解决图床</title>
    <link href="http://www.zhangjm.top/posts/3999350904/"/>
    <id>http://www.zhangjm.top/posts/3999350904/</id>
    <published>2022-04-08T03:35:00.000Z</published>
    <updated>2022-04-08T03:58:56.676Z</updated>
    
    <content type="html"><![CDATA[<p>在众多 <code>md</code> 编辑器中，<a href="https://www.typora.io/"><code>Typora</code></a> 是大家公认的体验较好的写作软件之一，它最大的特点就是：<strong>所见即所得</strong>，无须分屏预览，或者开启新页面预览。</p><p>​本文介绍Typora搭配PicGo解决图床问题。</p><span id="more"></span><h2 id="Typora设置上传图片并关联图床工具"><a href="#Typora设置上传图片并关联图床工具" class="headerlink" title="Typora设置上传图片并关联图床工具"></a>Typora设置上传图片并关联图床工具</h2><p><img src="https://s2.loli.net/2022/04/08/ef1dtGVg2R8ymD6.png" alt="image-20220408113713936">这里标注了三个红框：</p><ul><li>第一默认不是 <code>上传图片</code> 选项，下拉选择它；</li><li>第二个红框建议两个都选择，这样你写作所用到的图片无论是本地上传还是网络图片，都会直接上传到你的图床；</li><li>第三个红框是图床工具，根据个人偏好进行选择，还可以自定义命令。我这里选择开源免费的 <code>PicGo</code> ；紧接着是你的安装目录。</li></ul><p><a href="https://github.com/Molunerfinn/picgo/releases"><code>PicGo</code> 下载点此处</a></p><h3 id="picGo配置"><a href="#picGo配置" class="headerlink" title="picGo配置"></a>picGo配置</h3><p>安装完成之后，你会看到这个界面（<em>Windows</em>）</p><p><img src="https://s2.loli.net/2022/04/08/ZnvlUOshc3H2KV4.png" alt="image-20220408114111813"></p><p>PicGo默认图床就是 <code>SM.MS</code> 。所以，接下来我们就要配置图床。</p><p>顺便提一句，什么是图床，这里给一个解释：</p><blockquote><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p></blockquote><p>关于 <code>PicGo</code> 也可以参考<a href="https://picgo.github.io/PicGo-Doc/zh/guide/"><code>PicGo</code> 的官方指南</a></p><h3 id="注册-SM-MS图床"><a href="#注册-SM-MS图床" class="headerlink" title="注册 SM.MS图床"></a>注册 SM.MS图床</h3><p>注册或者登录 SM.MS 官网并获取 <code>Secret Token</code></p><p><a href="https://sm.ms/login">官网入口</a></p><p>获取 <code>Secret Token</code> ，在登录的情况下，<a href="https://sm.ms/home/apitoken">点此</a>直达下图位置：</p><p><img src="https://s2.loli.net/2022/04/08/wf2N4uRde8YGk7b.png" alt="image-20220408114539738"></p><p>新注册用户点击 <code>Generate Secret Token</code> 然后复制，建议再别的地方保存一份，不要重复生成</p><h3 id="PicGo配置-SM-MS图床"><a href="#PicGo配置-SM-MS图床" class="headerlink" title="PicGo配置 SM.MS图床"></a>PicGo配置 SM.MS图床</h3><p>配置我们在上步骤中生成的 <code>Secret Token</code>，点击确定即可，如果你准备将 <code>SM.MS</code> 作为默认图床使用，那就点击右边的 <code>设为默认图床</code> 。</p><p><img src="https://s2.loli.net/2022/04/08/yzvDj3Rok5fHhIm.png" alt="image-20220408114811301"></p><p>再次进入Typora的偏好设置，测试验证图片上传，成功即可在<a href="https://sm.ms/home/picture">SM.MS</a>看到上传的图片</p><p><img src="https://s2.loli.net/2022/04/08/Vom4jtWMz1lH2wf.png" alt="image-20220408115010270"></p><p>到这里说明我们的图床工具上传图片已经没有问题了，现在就可以在写作软件 Typora 中体验了总结</p><ul><li>本文内容适合第一次给写作软件搭配图床的朋友参考，本文只介绍了使用 SM.MS 这一种图床，其他图床的配置可以参考<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo指南</a>，写的很详细。</li><li>PicGo 中还有很多个性化设置，比如：上传前是否修改图片名、时间戳命名、自定义链接格式、开机自启等。</li><li>PicGo 中还有很多插件，比如给图片添加水印，这都在前面提到的 PicGo 指南中有说明，感兴趣的可以去尝试。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在众多 &lt;code&gt;md&lt;/code&gt; 编辑器中，&lt;a href=&quot;https://www.typora.io/&quot;&gt;&lt;code&gt;Typora&lt;/code&gt;&lt;/a&gt; 是大家公认的体验较好的写作软件之一，它最大的特点就是：&lt;strong&gt;所见即所得&lt;/strong&gt;，无须分屏预览，或者开启新页面预览。&lt;/p&gt;
&lt;p&gt;​本文介绍Typora搭配PicGo解决图床问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="环境搭建" scheme="http://www.zhangjm.top/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Docker 简单版</title>
    <link href="http://www.zhangjm.top/posts/1525530440/"/>
    <id>http://www.zhangjm.top/posts/1525530440/</id>
    <published>2022-04-07T07:47:00.000Z</published>
    <updated>2022-04-12T04:02:45.385Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的<a href="https://baike.baidu.com/item/%E9%95%9C%E5%83%8F/1574">镜像</a>中，然后发布到任何流行的 <a href="https://baike.baidu.com/item/Linux">Linux</a>或<a href="https://baike.baidu.com/item/Windows/165458">Windows</a>操作系统的机器上，也可以实现<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8C%96/547949">虚拟化</a>。容器是完全使用<a href="https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318">沙箱</a>机制，相互之间不会有任何接口。</p><p>本文基于cenos7学习Docker,参考<a href="https://www.bilibili.com/video/BV1og4y1q7M4">B站视频</a> 以及 <a href="ttps://www.runoob.com/docker/docker-tutorial.html">菜鸟教程</a>,进度持续更新</p><span id="more"></span><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p><a href="https://www.runoob.com/docker/docker-tutorial.html">菜鸟中文教程</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统内核 3.10 以上</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ~]# uname -r</span><br><span class="line">3.10.0-1160.53.1.el7.x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统版本</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> /etc/os-release</span> </span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;7 (Core)&quot;</span><br><span class="line">ID=&quot;centos&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;7&quot;</span><br><span class="line">PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;</span><br><span class="line">HOME_URL=&quot;https://www.centos.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://docs.docker.com/engine/install/centos/">Docker文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">1、卸载旧版本decker</span> </span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">保留/var/lib/Docker/的内容，包括 images, containers, volumes, and networks</span></span><br><span class="line"> sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、安装 yum-utils 包(它提供 yum-config-manager 实用工具)并设置稳定存储库</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、设置镜像源地址</span>  </span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">   http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、更新yum软件包索引</span></span><br><span class="line"> yum makecache fast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、安装docker</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line">                  </span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">6、运行docker服务</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7、测试运行hello-world镜像来验证是否安装正确</span></span><br><span class="line">sudo docker run hello-world</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将打印 Hello from Docker!</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8、配置阿里云镜像加速器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阿里云获取镜像加速器地址：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker客户端版本大于 1.10.0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://qyb456zk.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后续安装完docker后，可以用docker info命令，查看Registry Mirrors镜像源地址</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Registry Mirrors:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://qyb456zk.mirror.aliyuncs.com/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">9、卸载docker</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载 Docker Engine、 CLI 和 Containerd 软件包:</span></span><br><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载不会自动删除主机上的映像、容器、卷或自定义配置文件。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动删除所有图像、容器和卷:</span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure><h1 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h1><p><a href="https://docs.docker.com/engine/reference/run/">Docker命令文档：官方</a></p><p><a href="https://www.runoob.com/docker/docker-command-manual.html">Docker命令文档：菜鸟</a></p><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a><em>帮助命令</em></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">帮助命令</span></span><br><span class="line">docker 命令 --help</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本信息</span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">系统信息 包括镜像和容器的数量</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><h2 id="镜像命令-官网文档地址"><a href="#镜像命令-官网文档地址" class="headerlink" title="镜像命令  官网文档地址"></a>镜像命令  <a href="https://docs.docker.com/engine/reference/commandline/images/">官网文档地址</a></h2><h3 id="docker-images-查看所有本地主机上的镜像"><a href="#docker-images-查看所有本地主机上的镜像" class="headerlink" title="docker images 查看所有本地主机上的镜像"></a><strong>docker images</strong> 查看所有本地主机上的镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看现有镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">  -a, --all             # 列出所有镜像</span><br><span class="line">  -q, --quiet        # 只展示镜像的id</span><br></pre></td></tr></table></figure><p>各个选项说明:</p><ul><li><strong>REPOSITORY：</strong>表示镜像的仓库源</li><li><strong>TAG：</strong>镜像的标签</li><li><strong>IMAGE ID：</strong>镜像ID</li><li><strong>CREATED：</strong>镜像创建时间</li><li><strong>SIZE：</strong>镜像大小</li></ul><h3 id="docker-search-搜索镜像"><a href="#docker-search-搜索镜像" class="headerlink" title="docker search 搜索镜像"></a><strong>docker search</strong> 搜索镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索mysql</span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">--fliter </span><br><span class="line">--limit </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">过滤stars&gt;=3000的mysql</span></span><br><span class="line">docker search mysql --filter=stars=3000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只展示5条</span></span><br><span class="line">docker search mysql --limit 5</span><br></pre></td></tr></table></figure><p>各个选项说明:</p><ul><li><strong>NAME:</strong> 镜像仓库源的名称</li><li><strong>DESCRIPTION:</strong> 镜像的描述</li><li><strong>OFFICIAL:</strong> 是否 docker 官方发布</li><li><strong>stars:</strong> 类似 Github 里面的 star，表示点赞、喜欢的意思</li><li><strong>AUTOMATED:</strong> 自动构建</li></ul><h3 id="docker-pull-下载镜像"><a href="#docker-pull-下载镜像" class="headerlink" title="docker pull 下载镜像"></a><strong>docker pull</strong> 下载镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">docker pull mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Using default tag: latest   <span class="comment"># 如果不写tag，默认就是latest</span></span></span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h3 id="docker-rmi-删除镜像"><a href="#docker-rmi-删除镜像" class="headerlink" title="docker rmi 删除镜像"></a><strong>docker rmi</strong> 删除镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 imageid 删除指定镜像 mysql5.7</span></span><br><span class="line">docker rmi -f c20987f18b13</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 imageid 删除多个  <span class="built_in">id</span>之间空格</span></span><br><span class="line">docker rmi -f c20987f18b13 d23bdf5b1b1b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有镜像 docker images -aq 获取所有的镜像<span class="built_in">id</span></span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>说明：有镜像才可以创建容器</p><p>例子:</p><p>Linux 下载一个centos镜像测试学习</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载centos 镜像</span></span><br><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a><strong>启动容器</strong></h3><p><strong>docker run</strong> ：创建一个新的容器并运行一个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;    容器名字 tomcat01 tomcat02,用来区分容器</span><br><span class="line">-d 后台方式运行</span><br><span class="line">-it 使用交互方式运行，进入容器查看内容</span><br><span class="line">-p 容器内部端口绑定到指定的主机端口 -p 8080:8080</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p 主机端口:容器端口（常用）</span><br><span class="line">-p 容器端口</span><br><span class="line">-P 容器内部端口随机映射到主机的端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试、启动并进入容器 （注意主机名称变化 iZwz93iuw6uw8s3wng63e5Z -&gt; bd924f004d63 （主机名为镜像<span class="built_in">id</span>））</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z /]# docker run -it centos /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器内的centos 基础版本，很多功能不完善</span></span><br><span class="line">[root@bd924f004d63 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从容器退回主机 （容器停止并退出）</span></span><br><span class="line">[root@bd924f004d63 /]# exit</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong>–name&#x3D;”nginx-lb”:</strong> 为容器指定一个名称；</li><li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li><li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li><li><strong>-h “mars”:</strong> 指定容器的hostname；</li><li><strong>-e username&#x3D;”ritchie”:</strong> 设置环境变量；</li><li><strong>–env-file&#x3D;[]:</strong> 从指定文件读入环境变量；</li><li><strong>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”:</strong> 绑定容器到指定CPU运行；</li><li>**-m :**设置容器使用内存最大值；</li><li><strong>–net&#x3D;”bridge”:</strong> 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</li><li><strong>–link&#x3D;[]:</strong> 添加链接到另一个容器；</li><li><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口；</li><li><strong>–volume , -v:</strong> 绑定一个卷；</li><li><strong>&#x2F;bin&#x2F;bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li></ul><p>要退出终端，直接输入 <strong>exit</strong>:</p><h3 id="查看所有运行的容器"><a href="#查看所有运行的容器" class="headerlink" title="查看所有运行的容器"></a><strong>查看所有运行的容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker ps 命令</span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">列出当前正在运行的容器</span></span><br><span class="line">-a    # 列出当前正在运行的容器 + 历史运行过的容器</span><br><span class="line">-n=?  #显示最近创建的容器个数 可组合所用 如 docker ps -a -n=1</span><br><span class="line">-q  # 只显示容器id</span><br></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a><strong>退出容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接容器停止并退出</span></span><br><span class="line">exit </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器不停止退出</span></span><br><span class="line">Ctrl + P + Q </span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a><strong>删除容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定容器 不能删除正在运行的容器，如果要强制删除 <span class="built_in">rm</span> -f</span></span><br><span class="line">docker rm 容器id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有容器</span></span><br><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有容器(不会删除正在运行的容器，没加-f)</span></span><br><span class="line">docker ps -a -q | xargs docker rm</span><br></pre></td></tr></table></figure><h3 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a><strong>启动和停止容器</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 docker start 启动一个已停止的容器</span></span><br><span class="line">docker start &lt;容器 ID&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器</span></span><br><span class="line">docker restart &lt;容器 ID&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止当前正在运行的容器</span></span><br><span class="line">docker stop &lt;容器 ID&gt;   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制停止容器</span></span><br><span class="line">docker kill &lt;容器 ID&gt;</span><br></pre></td></tr></table></figure><h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a><strong>常用其他命令</strong></h3><h4 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a><strong>后台启动容器</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker 的服务是在后台运行的，我们可以过 -d 指定容器的运行模式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注：加了 -d 参数默认不会进入容器，想要进入容器需要使用指令 docker <span class="built_in">exec</span>（下面会介绍到）</span></span><br><span class="line">docker run -itd centos /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker 容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如 nginx 容器启动后，发现没有提供服务，就会立刻停止</span></span><br></pre></td></tr></table></figure><h4 id="日志命令"><a href="#日志命令" class="headerlink" title="日志命令"></a><strong>日志命令</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 10 0a886f575bff</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自造日志数据</span></span><br><span class="line">docker run -d centos /bin/sh -c &quot;while true;do echo logs start.....;sleep 1;done&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拿到容器<span class="built_in">id</span></span></span><br><span class="line">docker ps </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CONTAINER ID   IMAGE     COMMAND</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">c9854ae028f1   centos    <span class="string">&quot;/bin/sh -c &#x27;while t…&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印可看到 `logs start.....`</span></span><br><span class="line">docker logs -f -t --tail 10 c9854ae028f1</span><br><span class="line">2022-04-07T06:17:28.918458519Z logs start.....</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-f :</strong> 跟踪日志输出</li><li>**–since :**显示某个开始时间的所有日志</li><li><strong>-t :</strong> 显示时间戳</li><li>**–tail :**仅列出最新N条容器日志</li></ul><h4 id="top-命令"><a href="#top-命令" class="headerlink" title="top 命令"></a><strong>top 命令</strong></h4><p>**docker top :**查看容器中运行的进程信息，支持 ps 命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器<span class="built_in">id</span>为 c9854ae028f1 的进程信息</span></span><br><span class="line">docker top c9854ae028f1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看到所有运行容器的进程信息</span></span><br><span class="line">for i in  `docker ps |grep Up|awk &#x27;&#123;print $1&#125;&#x27;`;do echo \ &amp;&amp;docker top $i; done</span><br></pre></td></tr></table></figure><p>容器运行时不一定有&#x2F;bin&#x2F;bash终端来交互执行top命令，而且容器还不一定有top命令，可以使用docker top来实现查看container中正在运行的进程。</p><h4 id="Docker-inspect-命令"><a href="#Docker-inspect-命令" class="headerlink" title="Docker inspect 命令"></a><strong>Docker inspect 命令</strong></h4><p><strong>docker inspect :</strong>  获取容器&#x2F;镜像的元数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像 mysql8.0的元信息</span></span><br><span class="line">docker inspect mysql:8.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器<span class="built_in">id</span>为 `c9854ae028f1`的元信息</span></span><br><span class="line">docker inspect c9854ae028f1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-f :**指定返回值的模板文件。</li><li>**-s :**显示总的文件大小。</li><li>**–type :**为指定类型返回JSON。</li></ul><h4 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a><strong>进入当前正在运行的容器</strong></h4><p>方式一：（<strong>推荐</strong>）exit退出不会关闭容器</p><p><strong>docker exec ：</strong>在运行的容器中执行命令 或进入容器修改配置等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">交互模式进入centos</span> </span><br><span class="line">docker exec -it 0a886f575bff /bin/bash</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-d :**分离模式: 在后台运行</li><li>**-i :**即使没有附加也保持STDIN 打开</li><li>**-t :**分配一个伪终端</li></ul><p>方式二：exit 退出会关闭容器</p><p>**docker attach :**连接到正在运行中的容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法</span></span><br><span class="line">docker attach [OPTIONS] CONTAINER</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接进入容器 0a886f575bff</span></span><br><span class="line">docker attach 0a886f575bff</span><br><span class="line">正在执行当前的代码...</span><br></pre></td></tr></table></figure><p>两者区分：</p><p><code>docker exec</code> : 进入容器后开启一个新的终端，可以在里面操作（常用）,退出不会关闭容器</p><p><code>docker attach</code> : 进入容器正在执行的终端，不会启动新的进程，<strong>CTRL-D</strong>或<strong>CTRL-C</strong>会停止容器，attact 带上**–sig-proxy&#x3D;false<strong>来确保</strong>CTRL-D<strong>或</strong>CTRL-C**不会关闭容器，如：docker attach –sig-proxy&#x3D;false 0a886f575bff</p><h4 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a><strong>cp 命令</strong></h4><p>**docker cp :**用于容器与主机之间的数据拷贝。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将主机/data/test2.java 拷贝到容器 0a886f575bff 的/home 目录下</span></span><br><span class="line">docker cp /data/test2.java 0a886f575bff/home</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将主机 /data/test2.java 拷贝到容器 0a886f575bff 中，文件重命名为test3</span></span><br><span class="line">docker cp /data/test2.java 0a886f575bff:/home/test3.java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将主机 /data/blog 目录拷贝到容器 0a886f575bff 中，目录重命名为blog2</span></span><br><span class="line">docker cp /data/blog 0a886f575bff:/home/blog2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器 0a886f575bff 的目录 /home下的test3.java 拷贝到主机的/data目录下，并重命名为test4</span></span><br><span class="line">docker cp 0a886f575bff:/home/test3.java /data/test4.java</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**-L :**保持源目标中的链接</li></ul><p>拷贝是一个手动过程，后续使用 -v 卷的技术，实现数据自动同步</p><h2 id="Docker-知识图解"><a href="#Docker-知识图解" class="headerlink" title="Docker 知识图解"></a><strong>Docker 知识图解</strong></h2><h3 id="Docker-框架图解"><a href="#Docker-框架图解" class="headerlink" title="Docker 框架图解"></a><em>Docker 框架图解</em></h3><p><img src="https://s2.loli.net/2022/04/08/HNZbBKkDSMWCtVv.png" alt="image-20220408112828156"></p><h3 id="Docker-命令图解"><a href="#Docker-命令图解" class="headerlink" title="Docker 命令图解"></a><em>Docker 命令图解</em></h3><p><img src="https://s2.loli.net/2022/04/08/nkYps7fXNWq5GAw.png" alt="img"></p><h2 id="Docker-命令大全"><a href="#Docker-命令大全" class="headerlink" title="Docker 命令大全"></a><strong>Docker 命令大全</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当前she1T下attach连接指定运行镜像</span></span><br><span class="line">attachAttach to a running container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过Dockerfile定制镜像</span></span><br><span class="line">buildBuild an image from a Dockerfile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提交当前容器为新的镜像</span></span><br><span class="line">commitCreate a new image from a container changes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从容器中拷贝指定文件或者目录到宿主机中</span></span><br><span class="line">cpCopy files/folders from the containers filesystem to the host path</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">创建一个新的容器，同ru,但不启动容器</span></span><br><span class="line">createCreate a new container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看docker容器变化</span></span><br><span class="line">diffInspect changes on a container&#x27;s filesystem</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从docker服务获取容器实时事件</span></span><br><span class="line">eventsGet real time events from the server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在已存在的容器上运行命令</span></span><br><span class="line">execRun a command in an existing container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导出容器的内容流作为一个tar归档文件[对应</span></span><br><span class="line">exportStream the contents of a container as a tar archive import</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">展示一个镜像形成历史</span></span><br><span class="line">historyShow the history of an image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出系统当前镜像</span></span><br><span class="line">imagesList images</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从tar包中的内容创建一个新的文件系统映像[对应<span class="built_in">export</span>]</span></span><br><span class="line">importCreate a new filesystem image from the contents of a tarbal1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示系统相关信息</span></span><br><span class="line">infoDisplay system-wide information</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看容器详细信息</span></span><br><span class="line">inspectReturn low-level information on a container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ki11指定docker容器</span></span><br><span class="line">killKill a running container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从一个tar包中加载一个镜像[对应save]</span></span><br><span class="line">loadLoad an image from a tar archive</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注册或者登陆一个docker源服务器</span></span><br><span class="line">loginRegister or Login to the docker registry server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从当前Docker registry退出</span></span><br><span class="line">logoutLog out from a Docker registry server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出当前容器日志信息</span></span><br><span class="line">logsFetch the logs of a container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看映射端口对应的容器内部源端口</span></span><br><span class="line">portLookup the public-facing port which is NAT-ed to PRIVATE_PORT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">暂停容器</span></span><br><span class="line">pausePause all processes within a container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出容器列表</span></span><br><span class="line">psList containers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从docker镜像源服务器拉取指定镜像或者库镜像</span></span><br><span class="line">pullPull an image or a repository from the docker registry server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送指定镜像或者库镜像至docker源服务器</span></span><br><span class="line">pushPush an image or a repository to the docker registry server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启运行的容器</span></span><br><span class="line">restartRestart a running container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">移除一个或者多个容器</span></span><br><span class="line">rmRemove one or more containers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">移除一个或多个镜像[无容器使用该镜像才可删除，否则需刷除相关容器才可继续或-千强制删除]</span></span><br><span class="line">rmiRemove one or more images</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建一个新的容器并运行一个命令</span></span><br><span class="line">runRun a command in a new container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">保存一个镜像为一个tar包[对应1oad]</span></span><br><span class="line">saveSave an image to a tar archive</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在docker hub中搜索镜像</span></span><br><span class="line">searchSearch for an image on the Docker Hub</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动容器</span></span><br><span class="line">startStart a stopped containers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止容器</span></span><br><span class="line">stopStop a running containers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">给源中镜像打标签</span></span><br><span class="line">tagTag an image into a repository</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看容器中运行的进程信息</span></span><br><span class="line">topLookup the runding processes of a container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取消暂停容器</span></span><br><span class="line">unpauseUnpause a paused container</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看docker版本号</span></span><br><span class="line">versionShow the docker version information</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">截取容器停止时的退出状态值</span></span><br><span class="line">waitBlock unti1 a container,stops,then print its exit code</span><br></pre></td></tr></table></figure><h2 id="Docker-安装服务"><a href="#Docker-安装服务" class="headerlink" title="Docker 安装服务"></a><strong>Docker 安装服务</strong></h2><h3 id="1、Docker-安装Nginx"><a href="#1、Docker-安装Nginx" class="headerlink" title="1、Docker 安装Nginx"></a>1、Docker 安装Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dockerhub 搜索镜像</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像，官方最新版本 1.21.6</span></span><br><span class="line">docker pull nginx:1.21.6</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动nginx容器，后台运行、命名为nginx01、 暴露宿主机端口3344 映射容器80端口</span></span><br><span class="line">docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行测试访问 nginx</span></span><br><span class="line">curl localhost:3344</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回成功 ： Welcome to nginx!</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">外网访问 主机ip:3344 也一致 （阿里云服务器记得打开安全组3344端口）</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it nginx01 /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询nginx 相关文件地址</span></span><br><span class="line">whereis nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止nginx01 容器，再次访问 报异常 curl: (7) Failed connect to localhost:3344; Connection refused</span></span><br><span class="line">curl localhost:3344</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次启动 在访问就正常了</span></span><br><span class="line">docker restart nginx01</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后续使用卷技术，处理每次修改nginx配置需要进入容器内部修改问题</span></span><br></pre></td></tr></table></figure><h3 id="2、Docker-安装Tomcat"><a href="#2、Docker-安装Tomcat" class="headerlink" title="2、Docker 安装Tomcat"></a>2、Docker 安装Tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官网文档使用方式，注意点：  docker run -it --<span class="built_in">rm</span>  一般用来测试，用完即删，用docker ps 找不到容器</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载并启动tomcat容器</span> </span><br><span class="line">docker run -it  -d --name tomcat01  -p 3345:8080 tomcat:9.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问测试,，注意它会返回 404，因为默认情况下没有加载 web 应用程序）</span></span><br><span class="line">curl localhost:3345 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件在/usr/local/tomcat/conf/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it tomcat01 /bin/bash</span><br><span class="line"></span><br><span class="line">ls -al</span><br><span class="line">cd webapps</span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入后发现linux命令部分缺少以及没有webapps目录空</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将目录下webapps.dist 放置在webapps 下即可访问 显示出 <span class="built_in">cat</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> -f：覆盖已经存在的目标文件而不给出提示</span></span><br><span class="line">cp -r  /usr/local/tomcat/webapps.dist/* /usr/local/tomcat/webapps</span><br></pre></td></tr></table></figure><h3 id="3、Docker-安装Elasticsearch-kibana"><a href="#3、Docker-安装Elasticsearch-kibana" class="headerlink" title="3、Docker 安装Elasticsearch + kibana"></a>3、Docker 安装Elasticsearch + kibana</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装并启用 暴露端口9200 9300</span></span><br><span class="line">docker run -d --name elasticsearch01 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试 打印json  显示有 You Know, <span class="keyword">for</span> Search 即成功</span></span><br><span class="line">curl localhost:9200</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">es十分耗内存，1G以上</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看资源情况</span></span><br><span class="line">docker stats</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器</span></span><br><span class="line">docker stop elasticsearch01</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加es的内存资源限制   -e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span></span> </span><br><span class="line">docker run -d --name elasticsearch02 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot;  elasticsearch:7.6.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Docker-可视化"><a href="#Docker-可视化" class="headerlink" title="Docker 可视化"></a>Docker 可视化</h1><ul><li><strong>portainer</strong>(先用，非最佳选择)</li><li><strong>Rancher</strong>(等到CI&#x2F;CD再用)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 portainer</span></span><br><span class="line">docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">curl localhost:8088</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">外网访问 主机名：8088 设置密码后可进入界面 选择<span class="built_in">local</span>环境</span> </span><br></pre></td></tr></table></figure><p>界面如下：</p><p><img src="https://s2.loli.net/2022/04/11/A1rjHDT9ZJOgmdX.png" alt="image-20220411100313319"></p><p><img src="https://s2.loli.net/2022/04/11/DsewkUmlzLaW92f.png" alt="image-20220411100325159"></p><h1 id="Docker-镜像讲解"><a href="#Docker-镜像讲解" class="headerlink" title="Docker 镜像讲解"></a>Docker 镜像讲解</h1><h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a><strong>镜像是什么</strong></h2><p>镜像就是一个轻量级的,可执行的独立软件包,用来打包软件运行环境和基于运行环境开发的软件,它包含运行某个软件所需的所有内容,包括代码,运行时,库,环境变量和配置文件。</p><p>所有的应用,直接打包docker镜像,就可以直接跑起来!</p><blockquote><p>镜像获取方式：</p></blockquote><ul><li>从远程仓库获取</li><li>其他地方拷贝</li><li>自己制作镜像 DockerFile</li></ul><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a><strong>Docker镜像加载原理</strong></h2><blockquote><p>UnionFs(联合文件系统查询)</p></blockquote><p>我们下载的时候看到的一层一层就是这个</p><p><strong>UnionFs</strong>(联合文件系统):  Union文件系统(UnionFS)是一种分层,轻量级并且高性能的文件系统,它支持对文件系统的修改作为一次提交来一层层的叠加,同时可以将不同目录挂载到同一个虚拟文件系统下,Union文件系统是Docker镜像的基础,镜像可以通过分层来进行继承,基于基础镜像(没有父镜像),可以制作各种具体的应用镜像</p><p>特性: 一次同时加载多个文件系统,但从外面看起来,只能看到一个文件系统,联合加载会把各层文件系统叠加起来,这样最终的文件系统会包含所有底层的文件和目录结构</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成,这种层级的文件系统UnionFS</p><p><strong>bootfs</strong>(boot file system)主要包含bootlloader和kernel,bootfs主要是引导加载kernel,Linux刚启动时会加载bootfs文件系统,在docker镜像的最底层是bootfs,这一层与我们典型的Linux&#x2F;Unix系统是一样的,包含boot加载器和内核,当boot加载完成之后整个内核就在内存中了,此时内存的使用权已由bootfa转交给内核,此时系统也会卸载bootfs</p><p><strong>rootfs</strong>(root file system),在bootfs之上,包含的就是典型Linux系统中的&#x2F;dev, &#x2F;proc,&#x2F;bin, &#x2F;etc等标准目录和文件,rootfs就是各种不同的操作系统发行版,比如Ubuntu, CentOS等等</p><p><img src="https://s2.loli.net/2022/04/11/8GlJr613D5qgEVb.jpg" alt="img"></p><p>平时我们安装进虚拟机的CentOS都是好几个G,为什么Docker这里才200M?</p><p>对于一个精简的OS,rootfs可以很小,只需要包含基本的命令,工具和程序库就可以了,因为底层直接用Host的kernel,自己只需要提供rootFS就可以了。由此可见对于不同的linux发行版,bootfs基本是一致的,rootfs会有差别,因此不同的发行版可以共用bootfs</p><h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a><strong>分层理解</strong></h2><ul><li>分层的镜像</li></ul><p>​    我们可以去下载一个镜像,注意观察下载的日志输出,可以看到是一层一层的在下载!</p><p><img src="https://s2.loli.net/2022/04/11/jcznBZGAkboFR1M.png" alt="image-20220411102954484"></p><blockquote><p>思考: 为什么<code>Docker</code>镜像要采用这种分层的结构呢?</p><p>最大好处,我觉得莫过于资源共享了!比如有多个镜像都从相同的<code>Base</code>镜像构建而来,那么宿主机</p><p>只需在磁盘上保留一份base镜像,同时内存中也只需要加载一份base镜像,这样就可以为所有的容器服务了,而且镜像的每一层都可以被共享</p></blockquote><ul><li>查看镜像分层的方式可以通过 <code>docker image inspect</code> 命令!</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ~]# docker image inspect redis:latest</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:7614ae9453d1d87e740a2056257a6de7135c84037c367e1fffa92ae922784631&quot;,</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;redis:latest&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;RepoDigests&quot;: [</span><br><span class="line">            &quot;redis@sha256:db485f2e245b5b3329fdc7eff4eb00f913e09d8feb9ca720788059fdc2ed8339&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Parent&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Comment&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-12-21T12:42:49.755107412Z&quot;,</span><br><span class="line">        &quot;Container&quot;: &quot;13d25f53410417c5220c8dfe8bd49f06abdbcd69faa62a9b877de02464bb04a3&quot;,</span><br><span class="line">        &quot;ContainerConfig&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;13d25f534104&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;6379/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">                &quot;GOSU_VERSION=1.12&quot;,</span><br><span class="line">                &quot;REDIS_VERSION=6.2.6&quot;,</span><br><span class="line">                &quot;REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.2.6.tar.gz&quot;,</span><br><span class="line">                &quot;REDIS_DOWNLOAD_SHA=5b2b8b7a50111ef395bf1c1d5be11e6e167ac018125055daa8b5c2317ae131ab&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;#(nop) &quot;,</span><br><span class="line">                &quot;CMD [\&quot;redis-server\&quot;]&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;sha256:e093f59d716c95cfce82c676f099b960cc700432ab531388fcedf79932fc81ec&quot;,</span><br><span class="line">            &quot;Volumes&quot;: &#123;</span><br><span class="line">                &quot;/data&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/data&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: [</span><br><span class="line">                &quot;docker-entrypoint.sh&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;DockerVersion&quot;: &quot;20.10.7&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;6379/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">                &quot;GOSU_VERSION=1.12&quot;,</span><br><span class="line">                &quot;REDIS_VERSION=6.2.6&quot;,</span><br><span class="line">                &quot;REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.2.6.tar.gz&quot;,</span><br><span class="line">                &quot;REDIS_DOWNLOAD_SHA=5b2b8b7a50111ef395bf1c1d5be11e6e167ac018125055daa8b5c2317ae131ab&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;redis-server&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;sha256:e093f59d716c95cfce82c676f099b960cc700432ab531388fcedf79932fc81ec&quot;,</span><br><span class="line">            &quot;Volumes&quot;: &#123;</span><br><span class="line">                &quot;/data&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/data&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: [</span><br><span class="line">                &quot;docker-entrypoint.sh&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: null</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Architecture&quot;: &quot;amd64&quot;,</span><br><span class="line">        &quot;Os&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;Size&quot;: 112691373,</span><br><span class="line">        &quot;VirtualSize&quot;: 112691373,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/493e300cb94a4190f7a68b9c6f136155369978d61b63fcfae339e94ee50ed038/diff:/var/lib/docker/overlay2/d35513642cb13c3c5b70de7f9b85ba4b7416f1f742735d86dd0dbfb1f05738bc/diff:/var/lib/docker/overlay2/87ccbbb2f3e8baa44a0ea00c2efcfaef425770f5a8253741fa5382d8200cdf41/diff:/var/lib/docker/overlay2/0fdbc4a9b74ed9953321352634909c1e5a344d16a951a4cc2733065fb9ad3bf2/diff:/var/lib/docker/overlay2/0370e40a7993ae389de6d5ed47892c6cced58890cfeae2d55907b6306a9fa785/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/2708e07b778eaf123a4d0720f31d98ee2a93b80acef10f56c46d418fc8f7c210/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/2708e07b778eaf123a4d0720f31d98ee2a93b80acef10f56c46d418fc8f7c210/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/2708e07b778eaf123a4d0720f31d98ee2a93b80acef10f56c46d418fc8f7c210/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;RootFS&quot;: &#123;</span><br><span class="line">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">            &quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:2edcec3590a4ec7f40cf0743c15d78fb39d8326bc029073b41ef9727da6c851f&quot;,</span><br><span class="line">                &quot;sha256:9b24afeb7c2f21e50a686ead025823cd2c6e9730c013ca77ad5f115c079b57cb&quot;,</span><br><span class="line">                &quot;sha256:4b8e2801e0f956a4220c32e2c8b0a590e6f9bd2420ec65453685246b82766ea1&quot;,</span><br><span class="line">                &quot;sha256:529cdb636f61e95ab91a62a51526a84fd7314d6aab0d414040796150b4522372&quot;,</span><br><span class="line">                &quot;sha256:9975392591f2777d6bf4d9919ad1b2c9afa12f9a9b4d260f45025ec3cc9b18ed&quot;,</span><br><span class="line">                &quot;sha256:8e5669d8329116b8444b9bbb1663dda568ede12d3dbcce950199b582f6e94952&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Metadata&quot;: &#123;</span><br><span class="line">            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>理解:</strong></p><ul><li>所有的<code>Docker镜像</code>都起始于一个基础镜像层,当进行修改或增加新的内容时,就会在当前镜像层之上,创建一个新的镜像层,</li><li>举一个简单的例子,假如基于<code>Ubuntu Linux 16.64</code>创建一个新的镜像,这就是新镜像的第一层,如果在该镜像中添加<code>python</code>包,就会在该镜像之上创建第二个镜像层; 如果继续添加一个安全补丁,就会创建第三个镜像层</li><li>该镜像已经包含3个镜像层,如下图所示(这只是一个简单的例子)</li></ul><p><img src="https://s2.loli.net/2022/04/11/mnYJj9ACvezQPlw.png" alt="img"></p><ul><li><p>在添加额外的镜像层的同时,镜像始终保持是当前所有镜像的组合,理解这一点非常重要</p><p>下图举了一个简单的例子,每个镜像层包含3个文件,而镜像包含了两个镜像层的6个文件</p></li></ul><p><img src="https://s2.loli.net/2022/04/11/fA8qEYgyUVB9RKv.png" alt="img"></p><ul><li>上图中的镜像层跟之前图中的略有区别,主要是便于展示文件</li><li>下图中展示了一个稍微复杂的三层镜像,在外部看来整个镜像只有6个文件,这是因为最上层的文件7是文件5的一个更新版本</li></ul><p><img src="https://s2.loli.net/2022/04/11/dzCrxoYnA5kuhE2.png" alt="img"></p><ul><li><p>文中情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中<code>Docker</code>通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。<br> <code>Linux</code>上可用的存储引撃有<code>AUFS</code>、 <code>Overlay2</code>、 <code>Device Mapper</code>、<code>Btrfs</code>以及<code>ZFS</code>。顾名思义，每种存储引擎都基于 <code>Linux</code>中对应的件系统或者块设备技术，井且每种存储引擎都有其独有的性能特点。</p></li><li><p><code>Docker</code>在 <code>Windows</code>上仅支持 <code>windowsfilter</code> 一种存储引擎，该引擎基于<code>NTFS</code>文件系统之上实现了分层和<code>CoW [1]</code>。</p></li><li><p>下图展示了与系统显示相同的三层镜像。所有镜像层堆并合井，对外提供统一的视图。</p><p><img src="https://s2.loli.net/2022/04/11/hc6eSVsKAPg8vy3.png" alt="img"></p></li><li><p><code>Docker</code> 镜像都是<em>只读</em>的，当容器启动时，一个新的可写层加载到镜像的顶部！<br>这一层就是我们通常说的容器层，容器之下的都叫镜像层</p></li></ul><p><img src="https://s2.loli.net/2022/04/11/iFjY28ZqMDBS16P.png" alt="img"></p><h2 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h2><p>创建镜像的两种方式</p><ol><li><code>commit</code> 从容器创建一个新的镜像</li><li><code>Dockerfile</code> 就是用来构建 <code>docker</code> 镜像的构建文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令和git原理类似</span></span><br><span class="line">docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[版本TAG]</span><br></pre></td></tr></table></figure><blockquote><p>  以<code>tomcat</code>为例，实战测试</p></blockquote><ol><li>启动一个默认的<code>tomcat</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ~]# docker run -itd -p 3345:8080 --name tomcat02 tomcat:9.0</span><br><span class="line">bfd9887fa09d9e94b60f329bc87adaa4d0e9498ebf9dd0307562ee3d8d0d9ad3</span><br></pre></td></tr></table></figure><ol start="2"><li>发现这个默认的<code>tomcat</code> 是没有<code>webapps</code>应用，官方的镜像默认<code>webapps</code>下面是没有文件的！</li></ol><p><img src="https://s2.loli.net/2022/04/11/gnAwHL5rQ27jmtR.png" alt="image-20220411112245632"></p><ol start="3"><li><p>进入容器，从webapps.dist把拷贝文件进去webapp</p><p><code>docker exec -it 容器id /bin/bash</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                                                                                  NAMES</span><br><span class="line">bfd9887fa09d   tomcat:9.0            &quot;catalina.sh run&quot;        7 seconds ago   Up 6 seconds   0.0.0.0:3345-&gt;8080/tcp, :::3345-&gt;8080/tcp                                              tomcat02</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ~]# docker exec -it bfd9887fa09d /bin/bash </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件</span></span><br><span class="line">root@bfd9887fa09d:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt  CONTRIBUTING.md  LICENSENOTICEREADME.md  RELEASE-NOTES  RUNNING.txt  bin  conf  lib  logs  native-jni-lib  temp  webapps  webapps.dist  work</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝文件</span></span><br><span class="line">root@bfd9887fa09d:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@bfd9887fa09d:/usr/local/tomcat# cd webapps</span><br><span class="line">root@bfd9887fa09d:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br></pre></td></tr></table></figure><ol start="4"><li><p>查看浏览器，运行正常<img src="https://s2.loli.net/2022/04/11/tbEcMdWvh2qKxIV.png" alt="image-20220411112749342"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器</span></span><br><span class="line">root@bfd9887fa09d:/usr/local/tomcat/webapps# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMES</span><br><span class="line">bfd9887fa09d   tomcat:9.0            &quot;catalina.sh run&quot;        19 minutes ago   Up 19 minutes   0.0.0.0:3345-&gt;8080/tcp, :::3345-&gt;8080/tcp                                              tomcat02</span><br></pre></td></tr></table></figure></li><li><p>将操作过的容器通过<code>commit</code> 为一个镜像！我们以后就使用我们修改过的镜像即可，而不需要每次都重新拷贝<code>webapps.dist</code>下的文件到<code>webapps</code>了，这就是我们自己的一个修改的镜像。<br> <code>docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ~]# docker commit -m=&quot;add webapps&quot; -a=&quot;zjm&quot; bfd9887fa09d tomcat-web:1.0</span><br><span class="line">sha256:308eb9b53f0afd8d6a879584345efdc932416c3205f7aeb28c951fcd999eb163</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ~]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">tomcat-web            1.0    308eb9b53f0a   21 seconds ago   685MB #新的镜像</span><br><span class="line">tomcat                9.0       b8e65a4d736d   3 months ago     680MB</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你想要保存当前容器的状态，就可以通过<code>commit</code>来提交，获得一个镜像，就好比我们我们使用虚拟机的快照</p></li></ol></li></ol><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a><strong>什么是容器数据卷</strong></h2><ul><li><p>将应用和环境打包成一个镜像！</p></li><li><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！需求：数据可以持久化</p></li><li><p><code>MySQL</code>，容器删除了，删库跑路！需求：<code>MySQL</code>数据可以存储在本地！</p></li><li><p>容器之间可以有一个数据共享的技术！<code>Docker</code>容器中产生的数据，同步到本地！</p></li><li><p>通过目录的挂载，将我们容器内的目录，挂载到<code>Linux</code>上面</p></li></ul><p><img src="https://s2.loli.net/2022/04/11/Jw9DyHCX8Y3it67.png" alt="img"></p><p><em>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</em></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><p>两种方式：</p><ol><li><p>方式一：使用命令 <code>-v</code> 挂载</p></li><li><p>方式二：使用<code>DockerFile</code></p></li></ol><p><strong>数据卷挂载方式1：直接使用命令来挂载<code> -v</code></strong></p><p><code>docker run -it -v 主机目录:容器内目录 -p 主机端口:容器内端口</code><br><code>-v, // volume list Bind mount a volume</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/home/ceshi：主机home目录下的ceshi文件夹 映射：centos容器中的/home</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z home]# docker run -it -d -v /home/ceshi:/home --name centos02 centos /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这时候主机的/home/ceshi文件夹就和容器的/home文件夹关联了,二者可以实现文件或数据同步了</span></span><br><span class="line"></span><br><span class="line">[root@0e03726392ad /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@0e03726392ad /]# cd home</span><br><span class="line">[root@0e03726392ad home]# ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在home下建aa.txt文件</span></span><br><span class="line">[root@0e03726392ad home]# touch aa.txt</span><br><span class="line">[root@0e03726392ad home]# ls</span><br><span class="line">aa.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器</span></span><br><span class="line">[root@0e03726392ad home]# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入主机目录，查看文件</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z home]# cd /home</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z home]# ls</span><br><span class="line">ceshi</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z home]# cd ceshi/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件同步显示</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ceshi]# ls</span><br><span class="line">aa.txt </span><br></pre></td></tr></table></figure><p><strong>通过 <code>docker inspect 容器id</code> 查看容器信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ceshi]# docker inspect centos02</span><br><span class="line">......</span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/home/ceshi&quot;, // Linux 目录</span><br><span class="line">                &quot;Destination&quot;: &quot;/home&quot;,// 容器目录</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/11/YHb7cRkae2rimZ4.png" alt="img"></p><p>再次测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、停止容器 centos02</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ceshi]# docker stop centos02</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、宿主机修改文件</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ceshi]# cd /home/ceshi</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ceshi]# ls</span><br><span class="line">aa.txt</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ceshi]# cat aa.txt </span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ceshi]# vim aa.txt </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">展示出刚加入的内容 `hello,linux updata`</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ceshi]# cat aa.txt </span><br><span class="line">hello,linux updata</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、启动容器</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z ceshi]# docker start centos02</span><br><span class="line">centos02</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、进入容器查看无数据是否同步</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z home]# docker attach centos02</span><br><span class="line">[root@0e03726392ad /]# cd /home </span><br><span class="line">[root@0e03726392ad home]# ls</span><br><span class="line">aa.txt</span><br><span class="line">[root@0e03726392ad home]# cat aa.txt </span><br><span class="line">hello,linux updata</span><br></pre></td></tr></table></figure><p><em>好处：我们以后修改只需要在本地修改即可，容器内会自动同步！</em></p><h2 id="实战：安装Mysql"><a href="#实战：安装Mysql" class="headerlink" title="实战：安装Mysql"></a>实战：安装Mysql</h2><blockquote><p>运行容器,需要做数据挂载 <em>安装启动mysql，需要配置密码的</em>，这是要注意点！参考官网 <a href="https://links.jianshu.com/go?to=https://hub.docker.com/_/mysql">hub</a><br><code>docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</code><br><code>-d</code> 后台运行<br><code>-p</code> 端口映射<br><code>-v</code> 卷挂载<br><code>-e</code> 环境配置<br><code>-- name</code> 容器名字</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载启动mysql5.7</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z /]# docker run -d -p 3346:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql5.7 mysql:5.7</span><br><span class="line">Unable to find image &#x27;mysql:5.7&#x27; locally</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Already exists </span><br><span class="line">93619dbc5b36: Already exists </span><br><span class="line">99da31dd6142: Already exists </span><br><span class="line">626033c43d70: Already exists </span><br><span class="line">37d5d7efb64e: Already exists </span><br><span class="line">ac563158d721: Already exists </span><br><span class="line">d2ba16033dad: Already exists </span><br><span class="line">0ceb82207cd7: Pull complete </span><br><span class="line">37f2405cae96: Pull complete </span><br><span class="line">e2482e017e53: Pull complete </span><br><span class="line">70deed891d42: Pull complete </span><br><span class="line">Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">b95b7e996f46b8548f1a15682e7b42d401c79f6e863f732089e9d27cfacd6a57</span><br></pre></td></tr></table></figure><p>启动成功之后，我们在本地使用<code>navicat</code>来测试一下，<code>navicat</code>-连接到服务器的<code>3346</code>–和容器内的<code>3306</code>映射</p><p>在本地测试创建一个数据库，查看一下我们映射的路径是否ok！<br> <em>测试连接：注意3346端口要在阿里云服务器的安全组中打开，否则无法连接。</em></p><p><img src="https://s2.loli.net/2022/04/11/dybMG8XeBhQz3Zp.png" alt="image-20220411175555365"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询宿主机mysql文件</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z /]# cd /home/mysql/</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z mysql]# ls</span><br><span class="line">conf  data</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z mysql]# cd data/</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z data]# ls</span><br><span class="line">auto.cnf    ca.pem           client-key.pem  ibdata1      ib_logfile1  mysql               private_key.pem  server-cert.pem  sys</span><br><span class="line">ca-key.pem  client-cert.pem  ib_buffer_pool  ib_logfile0  ibtmp1       performance_schema  public_key.pem   server-key.pem</span><br></pre></td></tr></table></figure><p>当我们本地用<code>navicat</code> 新建名称为<code>test</code>的数据库，容器也会创建</p><p><img src="https://s2.loli.net/2022/04/11/ScWaIs9Td7kOjPB.png" alt="image-20220411180326302"></p><p>假设我们将包含<code>mysql</code>的容器删除，发现，我们挂载到本地的数据卷依旧没有丢失</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z data]# docker rm -f mysql5.7</span><br><span class="line">mysql5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span> 依然存在</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z data]# ls</span><br><span class="line">auto.cnf    ca.pem           client-key.pem  ibdata1      ib_logfile1  mysql               private_key.pem  server-cert.pem  sys</span><br><span class="line">ca-key.pem  client-cert.pem  ib_buffer_pool  ib_logfile0  ibtmp1       performance_schema  public_key.pem   server-key.pem   test</span><br></pre></td></tr></table></figure><p>这就实现了容器数据持久化功能</p><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><ul><li>匿名挂载（不建议使用）<br><code>-v 容器内路径</code><br><code>-P</code>: 表示<code>随机映射端口</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br></pre></td></tr></table></figure><ul><li>查看所有的<code>volume</code>(卷)的情况</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z data]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME  # 容器内的卷名(匿名卷挂载)</span><br><span class="line">local     4cd84fdc06752c562ef2dec50bb74433b2ba8aa8e58acd95dd474667258c2f6f</span><br></pre></td></tr></table></figure><p><em>这种就是<code>匿名挂载</code>，我们在 <code>-v</code>只写了容器内的路径，没有写容器外的路径！</em></p><ul><li><p>具名挂载 （大多数使用的方式）</p><p><code>-P</code>:表示随机映射端口 <code>-v 卷名：容器内路径</code><br><code>docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</code></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z data]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx:1.21.6</span><br><span class="line">9c153f1241d7c990d2e93f27a863b752ca8474e2c7dd836f7a0e7602ea67130d</span><br></pre></td></tr></table></figure><ul><li>查看所有的<code>volume</code> (卷) 的情况<br><code>docker volume ls</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z data]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     4cd84fdc06752c562ef2dec50bb74433b2ba8aa8e58acd95dd474667258c2f6f</span><br><span class="line">local     juming-nginx</span><br></pre></td></tr></table></figure><ul><li>查看一下这个卷信息<br><code>docker volume inspect juming-nginx</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z data]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2022-04-11T18:19:22+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: null,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>所有的<code>docker</code>容器内的卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/自定义的卷名/_data</code>下</li><li>如果<em>指定了目录</em>，<code>docker volume ls</code> 是查看不到的。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z data]# cd /var/lib/docker/</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z docker]# ls</span><br><span class="line">buildkit  containers  image  network  overlay2  plugins  runtimes  swarm  tmp  trust  volumes</span><br><span class="line"></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z docker]# cd volumes/</span><br><span class="line"></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z volumes]# ls</span><br><span class="line">4cd84fdc06752c562ef2dec50bb74433b2ba8aa8e58acd95dd474667258c2f6f  backingFsBlockDev  juming-nginx  metadata.db</span><br><span class="line"></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z volumes]# cd /var/lib/docker/volumes/</span><br><span class="line"></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z volumes]# ls</span><br><span class="line">4cd84fdc06752c562ef2dec50bb74433b2ba8aa8e58acd95dd474667258c2f6f  backingFsBlockDev  juming-nginx  metadata.db</span><br><span class="line"></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z volumes]# cd juming-nginx/</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z juming-nginx]# ls</span><br><span class="line">_data</span><br><span class="line"></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z juming-nginx]# cd _data/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以看到 容器 的目录/etc/nginx 都同步过来了</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z _data]# ls</span><br><span class="line">conf.d  fastcgi_params  mime.types  modules  nginx.conf  scgi_params  uwsgi_params</span><br></pre></td></tr></table></figure><blockquote><p>  挂载三种方式：： 匿名挂载、具名挂载、指定路径挂载</p></blockquote><ol><li><code>-v 容器内路径</code> # 匿名挂载</li><li><code>-v 卷名：容器内路径</code> # 具名挂载 （常用）</li><li><code>-v /宿主机路径：容器内路径</code> # 指定路径挂载 <code>docker volume ls</code> 是查看不到的</li></ol><blockquote><p>  拓展：通过 <code>-v</code>容器内路径： <code>ro</code>或 <code>rw</code> 改变读写权限</p></blockquote><ol><li><code>ro</code> # readonly 只读</li><li><code>rw</code> # readwrite 可读可写</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure><p><code>ro</code> : 说明这个路径只能通过宿主机来操作，容器内部是无法操作！</p><h2 id="初识DockerFile"><a href="#初识DockerFile" class="headerlink" title="初识DockerFile"></a>初识DockerFile</h2><p><strong>挂载数据卷方式2: Dockerfile</strong></p><blockquote><p>  什么是DockerFile</p><ul><li><code>dockerfile</code> 就是用来构建 <code>docker 镜像</code>的构建文件！命令脚本！</li><li>通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个个的命令，每个命令都是一层！</li></ul></blockquote><ul><li>创建一个<code>dockerfile</code>文件，名字可以随便，建议<code>dockerfile</code></li><li>文件中的内容：指令(大写) + 参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z volumes]# cd /home</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z home]# mkdir docker-test-volume</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z home]# ls</span><br><span class="line">ceshi  docker-test-volume  mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建dockerfile文件</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z docker-test-volume]# # vim dockerfile    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内容</span></span><br><span class="line">FROM centos    # 当前这个镜像是以centos为基础的</span><br><span class="line">VOLUME [&quot;/volume01&quot;,&quot;/volume02&quot;]    # 挂载卷的卷目录列表(多个目录，名字自定义，最好加“/”，否则可能在启动容器时出错) </span><br><span class="line">CMD echo &quot;----------------end-----------------&quot;    # 输出一下用于测试</span><br><span class="line">CMD /bin/bash    # 默认走bash控制台</span><br></pre></td></tr></table></figure><blockquote><p>  构建出这个镜像</p><ol><li><code>-f dockerfile</code>： <code>-f</code>代表 <code>file</code>，指这个当前文件的地址(这里是当前目录下的 <code>dockerfile</code>)</li><li><code>-t zjm/centos</code> ： <code>-t</code>就代表 <code>target</code>，指目标目录(注意 <code>zjm</code>镜像名前不能加斜杠<code>‘/’</code>)</li><li><code>.</code> ：表示生成在当前目录下</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成镜像，使用dockerfile 配置 注意有  `.`</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z docker-test-volume]# docker build -f dockerfile -t zjm/centos:1.0 .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将按步骤执行</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">5d0da3dc9764</span></span><br><span class="line">Step 2/4 : VOLUME [&quot;/volume01&quot;,&quot;/volume02&quot;]</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span></span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">5119e0a6a485</span></span><br><span class="line">Step 3/4 : CMD echo &quot;-------------------end----------------&quot;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span></span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">6978424d9cb3</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span></span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">5e7162c29bce</span></span><br><span class="line">Successfully built 5e7162c29bce</span><br><span class="line">Successfully tagged zjm/centos:1.0</span><br></pre></td></tr></table></figure><ul><li>执行完成后查看自己构建的镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z docker-test-volume]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">zjm/centos            1.0       5e7162c29bce   15 minutes ago   231MB</span><br><span class="line">centos                latest    5d0da3dc9764   6 months ago    231MB</span><br></pre></td></tr></table></figure><ul><li>启动自己写的容器镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z docker-test-volume]# docker run -it zjm/centos:1.0 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器目录</span></span><br><span class="line">[root@c9b608d92b86 /]# ls -l</span><br><span class="line">total 56</span><br><span class="line">lrwxrwxrwx  1 root root    7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x  5 root root  360 Apr 12 03:44 dev</span><br><span class="line">drwxr-xr-x  1 root root 4096 Apr 12 03:44 etc</span><br><span class="line">drwxr-xr-x  2 root root 4096 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx  1 root root    7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx  1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------  2 root root 4096 Sep 15  2021 lost+found</span><br><span class="line">drwxr-xr-x  2 root root 4096 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x  2 root root 4096 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x  2 root root 4096 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 96 root root    0 Apr 12 03:44 proc</span><br><span class="line">dr-xr-x---  2 root root 4096 Sep 15  2021 root</span><br><span class="line">drwxr-xr-x 11 root root 4096 Sep 15  2021 run</span><br><span class="line">lrwxrwxrwx  1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x  2 root root 4096 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x 13 root root    0 Apr 12 03:44 sys</span><br><span class="line">drwxrwxrwt  7 root root 4096 Sep 15  2021 tmp</span><br><span class="line">drwxr-xr-x 12 root root 4096 Sep 15  2021 usr</span><br><span class="line">drwxr-xr-x 20 root root 4096 Sep 15  2021 var</span><br><span class="line">drwxr-xr-x  2 root root 4096 Apr 12 03:44 volume01// 生成镜像时，自动创建的容器内部目录（数据卷目录 /volume01、 /volume02）    </span><br><span class="line">drwxr-xr-x  2 root root 4096 Apr 12 03:44 volume02</span><br></pre></td></tr></table></figure><ul><li>在容器 <code>数据卷目录</code> 内创建一个测试文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@c9b608d92b86 /]# cd volume01</span><br><span class="line">[root@c9b608d92b86 volume01]# touch ceshi.txt</span><br><span class="line">[root@c9b608d92b86 volume01]# ls</span><br><span class="line">ceshi.txt</span><br></pre></td></tr></table></figure><ul><li>查找主机内匿名的对应挂载目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ctrl + P + Q 退出</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z docker-test-volume]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE            COMMAND                  CREATED          STATUS          PORTS                                     NAMES</span><br><span class="line">c9b608d92b86   zjm/centos:1.0   &quot;/bin/bash&quot;              10 minutes ago   Up 10 minutes                                             optimistic_proskuriakova</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z docker-test-volume]# docker inspect c9b608d92b86</span><br><span class="line">......</span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;460fb906b6320f7642a71cb1b505699c2eda9f36b6c429dc0ee97fc9ae8221da&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/460fb906b6320f7642a71cb1b505699c2eda9f36b6c429dc0ee97fc9ae8221da/_data&quot;,</span><br><span class="line">                // 对应主机的匿名挂载目录</span><br><span class="line">                &quot;Destination&quot;: &quot;/volume01&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;e4d54fe07a65c192f0bc3093a4ceba25b2db9b6fe6aae338adbf489d8e50d461&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/e4d54fe07a65c192f0bc3093a4ceba25b2db9b6fe6aae338adbf489d8e50d461/_data&quot;,</span><br><span class="line">                 // 对应主机的匿名挂载目录</span><br><span class="line">                &quot;Destination&quot;: &quot;/volume02&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li>查看主机对应目录信息，和容器内的目录内容同步</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 volume01地址</span></span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z _data]# cd /var/lib/docker/volumes/460fb906b6320f7642a71cb1b505699c2eda9f36b6c429dc0ee97fc9ae8221da/_data</span><br><span class="line">[root@iZwz93iuw6uw8s3wng63e5Z _data]# ls</span><br><span class="line">ceshi.txt</span><br></pre></td></tr></table></figure><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h1 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的&lt;a href=&quot;https://baike.baidu.com/item/%E9%95%9C%E5%83%8F/1574&quot;&gt;镜像&lt;/a&gt;中，然后发布到任何流行的 &lt;a href=&quot;https://baike.baidu.com/item/Linux&quot;&gt;Linux&lt;/a&gt;或&lt;a href=&quot;https://baike.baidu.com/item/Windows/165458&quot;&gt;Windows&lt;/a&gt;操作系统的机器上，也可以实现&lt;a href=&quot;https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E5%8C%96/547949&quot;&gt;虚拟化&lt;/a&gt;。容器是完全使用&lt;a href=&quot;https://baike.baidu.com/item/%E6%B2%99%E7%AE%B1/393318&quot;&gt;沙箱&lt;/a&gt;机制，相互之间不会有任何接口。&lt;/p&gt;
&lt;p&gt;本文基于cenos7学习Docker,参考&lt;a href=&quot;https://www.bilibili.com/video/BV1og4y1q7M4&quot;&gt;B站视频&lt;/a&gt; 以及 &lt;a href=&quot;ttps://www.runoob.com/docker/docker-tutorial.html&quot;&gt;菜鸟教程&lt;/a&gt;,进度持续更新&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="http://www.zhangjm.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>「置顶」博客文章目录</title>
    <link href="http://www.zhangjm.top/posts/1930552035/"/>
    <id>http://www.zhangjm.top/posts/1930552035/</id>
    <published>2022-04-02T08:57:58.000Z</published>
    <updated>2022-04-08T04:00:39.454Z</updated>
    
    <content type="html"><![CDATA[<p>本博客内容主要集中在 Java 开发和优化相关的话题，包括一些<strong>工具</strong>、<strong>中间件</strong>、<strong>性能优化</strong>等，这里整理了一份目录供参考。</p><p>博客的每次更新都会更新这篇目录，方便查阅。</p><span id="more"></span><h1 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h1><ol><li>待补充</li></ol><h1 id="Java-开发"><a href="#Java-开发" class="headerlink" title="Java 开发"></a>Java 开发</h1><p>这里主要记录一些 Java 开发相关的博文</p><ol><li>待补充</li></ol><h1 id="环境、工具、中间件"><a href="#环境、工具、中间件" class="headerlink" title="环境、工具、中间件"></a>环境、工具、中间件</h1><p>记录一些学习、开发环境、工具以及中间件</p><ol><li><a href="http://zhangjm.top/posts/2508273186/">Hexo博客搭建以及使用</a></li><li><a href="http://zhangjm.top/posts/1525530440/">Docker学习</a></li><li><a href="http://zhangjm.top/posts/3999350904/">Typora搭配PicGo解决图床</a></li></ol><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><ol><li><a href="http://zhangjm.top/">待补充</a></li></ol><h1 id="个人总结和好物推荐"><a href="#个人总结和好物推荐" class="headerlink" title="个人总结和好物推荐"></a>个人总结和好物推荐</h1><p>与技术无关，但是可以提高幸福感和工作效率</p><ol><li><a href="http://zhangjm.top/">待补充</a></li></ol><h1 id="个人页"><a href="#个人页" class="headerlink" title="个人页"></a>个人页</h1><p><a href="http://zhangjm.top/about/">Gitming 的个人简介</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本博客内容主要集中在 Java 开发和优化相关的话题，包括一些&lt;strong&gt;工具&lt;/strong&gt;、&lt;strong&gt;中间件&lt;/strong&gt;、&lt;strong&gt;性能优化&lt;/strong&gt;等，这里整理了一份目录供参考。&lt;/p&gt;
&lt;p&gt;博客的每次更新都会更新这篇目录，方便查阅。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>基于Hexo、GitHub搭建个人博客</title>
    <link href="http://www.zhangjm.top/posts/2508273186/"/>
    <id>http://www.zhangjm.top/posts/2508273186/</id>
    <published>2022-04-02T06:46:03.000Z</published>
    <updated>2022-04-08T01:42:36.516Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选。</p><span id="more"></span><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><ol><li><p>安装Git</p></li><li><p>安装Node.js</p></li><li><p>安装Hexo</p></li><li><p>GitHub创建个人仓库并部署Hexo到GitHub</p></li></ol><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>这里使用压缩包的方式进行安装，尽管一键 <code>yum install -y</code> 更加简单粗暴，但是这样会把文件打散，使用压缩包的方式安装还能顺便学习许多命令和配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖库和编译工具</span></span><br><span class="line">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 git 最新版本（`tmp` 目录用来存放临时文件，服务器重启后会自动清除）</span></span><br><span class="line">cd /tmp &amp;&amp; wget https://www.kernel.org/pub/software/scm/git/git-2.35.0.tar.gz   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zvxf git-2.35.0.tar.gz   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">cd git-2.35.0 &amp;&amp; make all prefix=/usr/local/git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">make install prefix=/usr/local/git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置环境变量</span></span><br><span class="line">echo &#x27;export PATH=$PATH:/usr/local/git/bin&#x27; &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使环境变量配置生效</span></span><br><span class="line">source /etc/bashrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">git version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置用户名和邮箱</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git config --global user.email <span class="string">&quot;xxx@outlook.com&quot;</span></span></span><br><span class="line">git config --global user.name &quot;你的账号&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看配置信息</span></span><br><span class="line">git config -l</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 ssh 密钥</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ssh-keygen -t rsa -C <span class="string">&quot;xxx@outlook.com&quot;</span> 后回车三次</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;你的 github 邮箱&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开 `/root/.ssh/id_rsa.pub` ，将其中内容添加到 GitHub 的 SSH Key</span></span><br><span class="line">cat /root/.ssh//id_rsa.pub</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">尝试使用 ssh <span class="built_in">clone</span> 你的仓库</span></span><br><span class="line">git clone git@github.com:xxx/xx.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果 <span class="built_in">clone</span> 成功则说明 ssh 设置成功</span></span><br></pre></td></tr></table></figure><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建下载目录</span></span><br><span class="line">mkdir mydir</span><br><span class="line">cd mydir</span><br><span class="line">mkdir download</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入目录（用户下载nodejs包）用命令下载相关版本nodejs包（nodejs官网https://nodejs.org/en/download/）</span></span><br><span class="line">cd /mydir/download/ &amp;&amp; wget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压这个刚下好的安装包和重命名</span></span><br><span class="line">tar xvf node-v16.14.2-linux-x64.tar.xz</span><br><span class="line">mv node-v14.17.6-linux-x64 nodejs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软连接以便全局可用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ps: 否则node -v 报错：-bash: /usr/bin/node: 没有那个文件或目录</span></span><br><span class="line">ln -s /mydir/download/nodejs/bin/node /usr/bin/node</span><br><span class="line">ln -s /mydir/download/nodejs/bin/npm /usr/bin/npm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检验一下看是否安装成功，出现版本号则说明安装成功</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置nodejs国内镜像 如果返回 https://registry.npm.taobao.org/ ，说明镜像配置成功</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm config get registry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以使用cnpm，之后就可以使用cnpm了：（安装xxx） cnpm install xxx</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="卸载方式"><a href="#卸载方式" class="headerlink" title="卸载方式"></a>卸载方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先卸载npm 如果命令不能执行，则切换到管理员状态再尝试，同下</span></span><br><span class="line">npm uninstall npm -g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载node</span></span><br><span class="line">yum remove nodejs npm -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否有残留文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 /usr/local/lib 删除所有 node 和 node_modules文件夹</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 /usr/local/include 删除所有 node 和 node_modules 文件夹</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 /usr/local/bin 删除 node 的可执行文件</span></span><br></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 npm 源为淘宝源</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先把hexo命令添加到全局：hexo在nodejs的`lib/node_modules/hexo-cli/bin` 可以找到hexo命令(nodejs 我安装在`/mydir/download`下)</span></span><br><span class="line">ln -s /mydir/download/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">hexo -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里将博客放在 `/data/blog` 目录下</span> </span><br><span class="line">mkdir -p /data/blog &amp;&amp; cd /data/blog</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化 hexo</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 hexo 页面</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>目录下会生成文件文件：</p><ul><li><code>node_modules</code>: 依赖包</li><li><code>public</code>：存放生成的页面<ul><li><code>index.html</code>：博客的主页面</li></ul></li><li><code>scaffolds</code>：生成文章的一些模板</li><li><code>source</code>：用来存放你的文章</li><li><code>themes</code>：主题</li><li><code>** _config.yml</code>: 博客的配置文件**</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开hexo的服务</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制台打印内容</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">INFO  Validating config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">INFO  Start processing</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure><p>在浏览器输入ip:4000就可以看到你生成的博客了,访问提示“该网页无法正常运作”时，可能为没加入安全组</p><p>使用ctrl+c可以把服务关掉</p><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h2><h3 id="创建GitHub账户以及仓库"><a href="#创建GitHub账户以及仓库" class="headerlink" title="创建GitHub账户以及仓库"></a>创建GitHub账户以及仓库</h3><p>首先，你先要有一个GitHub账户，注册完登录后，在GitHub.com中看到一个New repository，点击新建仓库，创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名，点击create repository</p><h3 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h3><p>上面Git安裝有相同操作可不做</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱</span></span><br><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否输入错误</span></span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后创建SSH,一路回车</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后会生成.ssh的文件夹。文件夹地址： ‘/root/.ssh/id_rsa.pub’</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">id_rsa是你这台电脑的私人秘钥，id_rsa.pub是公共秘钥。把这个公钥放在GitHub上，用于匹配</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否成功</span></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h3><p>将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>翻到最后，修改为YourgithubName就是你的GitHub账户</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hexo clean清除了你之前生成的东西，也可以不加</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hexo generate 生成静态文章，可以用 hexo g缩写</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hexo deploy 部署文章，可以用hexo d缩写</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可能会弹出，填写Github账号以及密码（使用令牌）</span></span><br></pre></td></tr></table></figure><p>从2021年8月14日之后，使用git对github进行身份验证操作的时候不再接受使用账号密码形式clone和push代码，之前使用账号密码形式的可以改为使用acces_token形式上传（具体博客：<a href="https://link.juejin.cn/?target=https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">github.blog&#x2F;2020-12-15-…</a>）。</p><p>以下使用者不受此更改的影响：</p><ul><li><p>如果您为您的帐户启用了<a href="https://link.juejin.cn/?target=https://help.github.com/en/github/authenticating-to-github/securing-your-account-with-two-factor-authentication-2fa">双因素身份验证</a>，则您已经需要使用基于令牌或基于 SSH 的身份验证。</p></li><li><p>如果您使用 GitHub Enterprise Server，我们尚未宣布对我们的本地产品进行任何更改。</p></li><li><p>如果您维护一个<a href="https://link.juejin.cn/?target=https://docs.github.com/en/developers/apps/about-apps%23about-github-apps">GitHub App</a>，GitHub Apps 不支持密码认证。</p></li></ul><h3 id="Github令牌代替密码"><a href="#Github令牌代替密码" class="headerlink" title="Github令牌代替密码"></a>Github令牌代替密码</h3><p>Github头像 -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token</p><p>点击Generate token后，会显示生成的一段代替密码的序列号，一键复制之后将它存在方便找到的地方，因为下一次使用令牌时这里的序列号将被隐藏。</p><p>输入后，可进入自己的GItHub仓库,<code>https://github.com/YourgithubName/YourgithubName.github.io.git</code></p><p>然后 Settings -&gt; Github Pages ,点击 Check it out here</p><p> 出现 <code>Your site is published at https://YourgithubName.github.io/</code> 便是你的博客链接啦</p><h1 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h1><p>现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址不太够个性化，这就需要你设置个人域名了。</p><h3 id="首先你拥有一个域名"><a href="#首先你拥有一个域名" class="headerlink" title="首先你拥有一个域名"></a>首先你拥有一个域名</h3><h3 id="设置域名解析"><a href="#设置域名解析" class="headerlink" title="设置域名解析"></a>设置域名解析</h3><p>阿里云后台-&gt;侧边栏选择域名服务-&gt;点击域名-&gt;选择域名解析，进入到该域名的域名解析设置页</p><p>先用<code>ping yourusername.github.io</code>查询你的guihub主页对应的ip地址</p><p>然后在域名解析设置里添加两条记录：</p><ul><li>CNAME记录的记录值设置成域名，也就是你的github主页<code>yourname.github.io</code></li><li>A记录的记录值设置成IP地址，也就是我们刚才ping查询出来的IP地址</li></ul><p><strong>注意，解析线路选择默认</strong>，不要选境外。境外可做国内外分流用,。此处选择<strong>默认</strong>！！</p><h3 id="设置GItHub域名"><a href="#设置GItHub域名" class="headerlink" title="设置GItHub域名"></a>设置GItHub域名</h3><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>xx.xxx</code></p><h3 id="博客添加"><a href="#博客添加" class="headerlink" title="博客添加"></a>博客添加</h3><p>然后在你的博客文件<code>source</code> (我的在<code>/data/blog/source</code>) 中创建一个名为<code>CNAME</code>文件，不要后缀。写上你的域名</p><p>PS : 还有很多其他的文件如果想编译后放在public文件夹下，都可以先放source文件夹下，在hexo g编译后就会复制到public文件夹下</p><h3 id="重新构建Hexo"><a href="#重新构建Hexo" class="headerlink" title="重新构建Hexo"></a>重新构建Hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><p>接下来你就可以正式开始写文章了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发布一个名为newpapername的文章</span></span><br><span class="line">hexo new newpapername</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后在<span class="built_in">source</span>/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再执行下面命令就可以看到更新了</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="Hexo的基本设置"><a href="#Hexo的基本设置" class="headerlink" title="Hexo的基本设置"></a>Hexo的基本设置</h1><p>在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration">官方的配置</a>描述。</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>title</code></td><td align="center">网站标题</td></tr><tr><td align="center"><code>subtitle</code></td><td align="center">网站副标题</td></tr><tr><td align="center"><code>description</code></td><td align="center">网站描述</td></tr><tr><td align="center"><code>keywords</code></td><td align="center">网站的关键词。支持多个关键词</td></tr><tr><td align="center"><code>author</code></td><td align="center">您的名字</td></tr><tr><td align="center"><code>language</code></td><td align="center">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code></td></tr><tr><td align="center"><code>timezone</code></td><td align="center">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code></td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center"><code>url</code></td><td align="center">网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头</td><td align="center"></td></tr><tr><td align="center"><code>root</code></td><td align="center">网站根目录</td><td align="center">url’s pathname</td></tr><tr><td align="center"><code>permalink</code></td><td align="center">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td><td align="center">:year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</td></tr><tr><td align="center"><code>permalink_defaults</code></td><td align="center">永久链接中各部分的默认值</td><td align="center"></td></tr><tr><td align="center">pretty_urls</td><td align="center">改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td><td align="center"></td></tr><tr><td align="center">pretty_urls.trailing_index</td><td align="center">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td align="center">true</td></tr><tr><td align="center">pretty_urls.trailing_html</td><td align="center">是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td><td align="center">true</td></tr></tbody></table><blockquote><p><strong>网站存放在子目录</strong></p><p>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><p>在这里，你需要把url改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是<code>http://yoursite.xxx/2022/04/02/temp</code>。关于链接的变量还有很多，需要的可以去官网上查找 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br></pre></td></tr></table></figure><p><code>theme</code>就是选择什么主题，也就是在<code>theme</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>theme</code>文件夹下，再修改这个参数就可以了。</p><p>接下来这个<code>deploy</code>就是网站的部署的，<code>repo</code>就是仓库(Repository)的简写。<code>branch</code>选择仓库的哪个分支。这个在之前进行<code>github page</code>部署的时候已经修改过了，不再赘述。</p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局</p><h2 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h2><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建这三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹</p><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left"><code>post</code></td><td align="left"><code>source/_posts</code></td></tr><tr><td align="left"><code>page</code></td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>draft</code></td><td align="left"><code>source/_drafts</code></td></tr></tbody></table><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td></tr><tr><td align="left"><code>date</code></td><td align="left">文件建立日期</td></tr></tbody></table><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p><code>Front-matter</code> 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line"><span class="section">date: 2013/7/13 20:46:25</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td></tr></tbody></table><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> Diary</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">-</span> PS3</span><br><span class="line"><span class="bullet">-</span> Games</span><br></pre></td></tr></table></figure><h2 id="page"><a href="#page" class="headerlink" title="page"></a>page</h2><p>如果你想另起一页，那么可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page board</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>系统会自动给你在source文件夹下创建一个board文件夹，以及board文件夹中的index.md，这样你访问的board对应的链接就是<code>http://xxx.xxx/board</code></p><h2 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h2><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft newpage</span><br></pre></td></tr></table></figure><p>这样会在source&#x2F;_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft newpage</span><br></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中</p><h1 id="设置Hexo主题"><a href="#设置Hexo主题" class="headerlink" title="设置Hexo主题"></a>设置Hexo主题</h1><p>如果你觉得默认的<code>landscape</code>主题不好看，那么可以在<a href="https://hexo.io/themes/"><code>官网主题</code></a>中，选择你喜欢的一个主题进行修改。</p><p>直接在github链接上下载下来，然后放到<code>theme</code>文件夹下即可，修改配置文件 <code>_config.yml</code>中把<code>theme</code>换成那个主题文件夹的名字，它就会自动在<code>theme</code>文件夹中搜索你配置的主题，其他主题配置参照对应主题的配置即可。</p><h1 id="多终端发布博客"><a href="#多终端发布博客" class="headerlink" title="多终端发布博客"></a>多终端发布博客</h1><p>问题：假如你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者搬公司的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p>解决：利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝衔接操作。</p><h2 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h2><p>机制是这样的，由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面，其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github。</p><p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p><h2 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h2><p>首先，先在github上新建一个hexo分支，然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）然后在本地的任意目录下，打开git bash，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:ZJUFangzh/yourusername.github.io.git</span><br></pre></td></tr></table></figure><p>克隆到本地，再将本地的yourusername.github.io中，除了.git 文件夹外的所有文件都删掉。将博客源文件全部复制过来，除了.deploy_git。复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p>如有其它<code>.git</code>文件夹记得删除，包括<code>theme</code>中的主题文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push </span><br></pre></td></tr></table></figure><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，将在其它电脑上重新输入命令安装构建产生 。</p><h2 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h2><p>跟上面环境搭建一致，安装hexo时不用再初始化，直接在文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">git clone git@xxxxx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后进入克隆到的文件夹</span></span><br><span class="line">cd xxx.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成，部署</span></span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">就可以开始写你的新博客了</span></span><br><span class="line">hexo new newpage</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每次写完最好都把源文件上传一下</span></span><br><span class="line">git add .</span><br><span class="line">git commit –m &quot;xxxx&quot;</span><br><span class="line">git push </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是在已经编辑过的电脑上，已经有<span class="built_in">clone</span>文件夹了，那么，每次只要和远端同步一下就行了</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h1 id="植入评论系统"><a href="#植入评论系统" class="headerlink" title="植入评论系统"></a>植入评论系统</h1><p>推荐<a href="https://valine.js.org/">Valine</a> - 一款快速、简洁且高效的无后端评论系统。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选。&lt;/p&gt;</summary>
    
    
    
    
    <category term="环境搭建" scheme="http://www.zhangjm.top/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
